{"version":3,"sources":["assets/resources/tool/EventManager.ts"],"names":[],"mappings":";;;;;;;AAAA;IAAA;QAEY,WAAM,GAAG,EAAE,CAAA;IAmDvB,CAAC;IAhDG,4BAAK,GAAL,UAAM,IAAI;QACN,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QAClC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAA;IACnB,CAAC;IAED,yBAAE,GAAF,UAAG,IAAI,EAAE,MAAM,EAAE,EAAE;QACf,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC;YACnB,MAAM,EAAE,MAAM;YACd,EAAE,EAAE,EAAE;SACT,CAAC,CAAA;IACN,CAAC;IAED,0BAAG,GAAH,UAAI,IAAI,EAAE,MAAM;QACZ,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QAElC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,IAAI,MAAM,EAAE;gBACrC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA;aACjB;SACJ;IACL,CAAC;IAED,2BAAI,GAAJ,UAAK,IAAI;QAAE,cAAc;aAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;YAAd,6BAAc;;QACrB,IAAI,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE,CAAA;QAClC,IAAI,IAAI,GAAG,KAAK,CAAA;QAEhB,EAAE,CAAC,GAAG,CAAC,eAAe,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAA;QAEhE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;gBACT,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAA;aAC/B;iBAAM;gBACH,IAAI,GAAG,IAAI,CAAA;aACd;SACJ;QAED,IAAI,IAAI,EAAE;YACN,IAAI,GAAG,GAAG,CAAC,CAAA;YACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,CAAC,CAAC,EAAE;oBACT,IAAI,CAAC,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,CAAA;iBACxB;aACJ;YACD,IAAI,CAAC,MAAM,GAAG,GAAG,CAAA;YACjB,EAAE,CAAC,GAAG,CAAC,mBAAmB,EAAE,IAAI,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAA;SACtD;IACL,CAAC;IACL,mBAAC;AAAD,CArDA,AAqDC,IAAA;AArDY,oCAAY;AAuDzB,MAAM,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAA","file":"","sourceRoot":"/","sourcesContent":["export class EventManager {\n\n    private events = {}\n    latestMessages: any\n\n    clear(name) {\n        let list = this.events[name] || []\n        list.length = 0\n    }\n\n    on(name, target, cb) {\n        this.events[name] = this.events[name] || []\n        this.events[name].push({\n            target: target,\n            cb: cb,\n        })\n    }\n\n    off(name, target) {\n        let list = this.events[name] || []\n\n        for (let i = 0; i < list.length; i++) {\n            if (list[i] && list[i].target == target) {\n                list[i] = null\n            }\n        }\n    }\n\n    emit(name, ...args: any[]) {\n        let list = this.events[name] || []\n        let trim = false\n\n        cc.log(\"eventMgr.emit\", name, list.length, JSON.stringify(args))\n\n        for (let i = 0; i < list.length; i++) {\n            if (list[i]) {\n                list[i].cb.apply(null, args)\n            } else {\n                trim = true\n            }\n        }\n\n        if (trim) {\n            let cnt = 0\n            for (let i = 0; i < list.length; i++) {\n                if (list[i]) {\n                    list[cnt++] = list[i]\n                }\n            }\n            list.length = cnt\n            cc.log('EventManager trim', name, list.length, cnt)\n        }\n    }\n}\n\nwindow.EventManager = new EventManager()\n"]}